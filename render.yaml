services:
  - type: web
    name: crusestick
    runtime: docker
    plan: free
    dockerfilePath: ./Dockerfile
    dockerContext: .
    envVars:
      # App Settings
      - key: APP_NAME
        value: CruseStick
      - key: APP_ENV
        value: production
      - key: APP_DEBUG
        value: false
      - key: APP_KEY
        generateValue: true
      - key: APP_URL
        sync: false
      
      # Важно для Docker: Render будет устанавливать $PORT, Nginx слушает на 80
      # Laravel должен генерировать URL с HTTPS, если APP_ENV=production
      # Убедись, что в AppServiceProvider есть forceScheme('https') для production
      - key: ASSET_URL
        sync: false

      # Localization
      - key: APP_LOCALE
        value: en
      - key: APP_FALLBACK_LOCALE
        value: en
      - key: APP_FAKER_LOCALE
        value: en_US
      
      # App Maintenance
      - key: APP_MAINTENANCE_DRIVER
        value: file
      
      # PHP Settings (эти переменные могут не влиять на PHP-FPM напрямую, настройки PHP-FPM в его конфигах)
      # - key: PHP_CLI_SERVER_WORKERS
      #   value: 4 
      # - key: BCRYPT_ROUNDS
      #   value: 12
      
      # Logging
      - key: LOG_CHANNEL
        value: stderr
      - key: LOG_STACK
        value: single
      - key: LOG_DEPRECATIONS_CHANNEL
        value: null
      - key: LOG_LEVEL
        value: debug
      
      # Database (PostgreSQL on Render)
      - key: DB_CONNECTION
        value: pgsql
      - key: DB_URL
        sync: false
      
      # Sessions
      - key: SESSION_DRIVER
        value: file
      - key: SESSION_LIFETIME
        value: 120
      # - key: SESSION_ENCRYPT
      #   value: false
      # - key: SESSION_PATH
      #   value: /
      # - key: SESSION_DOMAIN
      #   value: null
      
      # Broadcasting, Filesystem, Queue
      - key: BROADCAST_CONNECTION
        value: log
      - key: FILESYSTEM_DISK
        value: local
      - key: QUEUE_CONNECTION
        value: sync
      
      # Cache
      - key: CACHE_STORE
        value: file
      # - key: CACHE_DRIVER
      #   value: file
      # - key: MEMCACHED_HOST
      #   value: 127.0.0.1
      
      # Redis (если будет использоваться)
      # - key: REDIS_CLIENT
      #   value: phpredis
      # - key: REDIS_HOST
      #   value: 127.0.0.1
      # - key: REDIS_PASSWORD
      #   value: null
      # - key: REDIS_PORT
      #   value: 6379
      
      # Mail Settings
      - key: MAIL_MAILER
        value: smtp
      - key: MAIL_HOST
        value: smtp.gmail.com
      - key: MAIL_PORT
        value: "587"
      - key: MAIL_USERNAME
        value: lexa5575@gmail.com
      - key: MAIL_PASSWORD
        sync: false
      - key: MAIL_ENCRYPTION
        value: tls
      - key: MAIL_FROM_ADDRESS
        value: mystickusa9@gmail.com
      - key: MAIL_FROM_NAME
        value: "CurseStick"
      
      # Vite (эти переменные используются при сборке фронтенда, они должны быть доступны на этапе frontend_builder)
      # Для этого их нужно передавать как build args в Dockerfile или они должны быть в .env на момент сборки,
      # Либо, если они нужны только в runtime JS, то они передаются через Blade/Inertia.
      # Сейчас они останутся как envVars, доступные в runtime контейнера.
      - key: VITE_APP_NAME
        value: "${APP_NAME}"
      # - key: VITE_PUSHER_APP_KEY
      #   sync: false
      # - key: VITE_PUSHER_HOST
      #   sync: false
      # - key: VITE_PUSHER_PORT
      #   sync: false
      # - key: VITE_PUSHER_SCHEME
      #   sync: false
      # - key: VITE_PUSHER_APP_CLUSTER
      #   sync: false
      
      # Stripe (хранятся в секретах Render)
      - key: STRIPE_KEY
        sync: false
      - key: STRIPE_SECRET
        sync: false
      - key: CASHIER_CURRENCY
        value: usd

    autoDeploy: true
    healthCheckPath: /
    # disk:
    #   name: storage
    #   mountPath: /var/www/html/storage
    #   sizeGB: 1

# Если у тебя есть база данных PostgreSQL, созданная на Render,
# ее нужно будет связать с веб-сервисом.
# Пример конфигурации базы данных (если еще не создана через UI Render):
# databases:
#   - name: твое-имя-базы-данных-на-render
#     plan: free
#     databaseName: имя_бд_внутри_pg
#     user: имя_пользователя_бд
#     # Пароль будет сгенерирован Render и доступен через переменные окружения